sequenceDiagram
participant u as User
participant e as Entry Point
participant vpm as VehicleProfileManager<br>(Manager Layer)
participant vps as VehicleProfileService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Right of e: Assume something in the entry point<br>called the manager to do create a user
Note Right of vpm: Assume the user provided values<br>are valid and the user is authorized<br>to create a vehicle profile

vpm->>+vps: CreateVehicleProfile(vin: string, licensePlate: string, color: string, userAccount: IUserAccount) : IResponse
    Note over vpm,vps: VehicleProfileManager calls upon<br>VehicleProfileService to create the vehicle

vps->>vps: Validate Parameters

# Use api to search for other details on the vehicle
vps->>vps: HttpCleint.SendAsync(request: HttpRequestMessage) : Task<HttpResponseMessage>
    Note over vps,vps: Requests information from API using the vin of the vehicle

# Create new IVehicleProfile Object
vps->>vps: VehicleProfileService creates a new IVehicleProfile object
    Note over vps,vps: string VIN = vin<br>string LicensePlate = licensePlate<br>string Make = make<br>string Model = model<br>int Year = year<br>string Color = color<br>int Owner = userID

# Send to data store
vps->>+dg: CreateVehicleProfileSql(vehicleProfile: IVehicleProfile) : IResponse
    Note over vps,dg: VehicleProfileService calls upon SqlDbVechileTarget to generate the sql statement and parameters<br>SqlDbVehicleTarget will create sql statement and parameters first

dg->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>) : int
    Note over dg,da: SqlServerUserTarget calls upon<br>SqlServerDAO to execute the sql

    da->>+ds: SqlCommand.ExecuteNonQuery()
        Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command
    ds->>ds: INSERT INTO VehicleProfile (VIN, LicensePlate, Make, Model, Year, Color)<br>VALUES (VIN, LicensePlate, Make, Model, Year, Color)

ds->>ds: User account is unsuccessfully<br>written to the Data Store

ds-->>-da: Database throws an exception

da-->>-dg: IResponse object returned with<br>`IResponse.HasError` equal to true and<br>`IResponse.ErrorMessage` equal to the error message 

dg->>dg: SqlDbUserTarget checks the error to see if the error is safe to retry

dg-->>-vps: IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

vps-->>ll: CreateLogAsync(LogLevel: string, LogCategory: string, LogContext: string, UserHash: string) : IResponse
    Note over vps,ll: UserService calls upon LogService to log<br>unsuccessful assignment of claims and/or account creation.<br>See logging success case

vps-->>-vpm: IResponse object returned