sequenceDiagram
participant u as User
participant e as Entry Point
participant vpm as VehicleProfileManager<br>(Manager Layer)
participant vps as VehicleProfileService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Right of e: Assume something in the entry point<br>called the manager to do create a user
Note Right of vpm: Assume the user provided values<br>are valid and the user is authorized<br>to create a vehicle profile

vpm->>+vps: CreateVehicleProfile(vin: string, licensePlate: string, color: string, userAccount: IUserAccount) : IResponse
    Note over vpm,vps: VehicleProfileManager calls upon<br>VehicleProfileService to create the vehicle

vps->>vps: Validate Parameters

# Use api to search for other details on the vehicle
vps->>vps: HttpCleint.SendAsync(request: HttpRequestMessage) : Task<HttpResponseMessage>
    Note over vps,vps: Requests information from API using the vin of the vehicle

vps->>vps: API Fails to retrieve necessary details

vps->>vps: Generate IResponse object
    Note over vps,vps: HasError = true<br>ErrorMessage = "Failed to retrieve data from API"

# Log unsuccessful vehicle creation
vps-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
    Note over vps,ll: UserService calls upon LogService to log<br>unsuccessful creation of vehicle profile.<br>See logging success case
    Note over vps,ll: logLevel: Error<br>logCategory: Data<br>logContext: IResponse.ErrorMessage<br>userHash: IUserAccount.UserHash

vps-->>-vpm: IResponse object returned