sequenceDiagram
participant u as Browser
participant az as AuthN/AuthZ<br>(Entry Point)
participant e as VehicleProfileEntryPoint<br>(Entry Point)
participant vpm as VehicleProfileManager<br>(Manager Layer)
participant vps as VehicleProfileDeletionService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Left of u: User attempts to to delete a<br>vehicle profile they own
u->>+az: CheckToken() 
    Note over u,az: *Temporary method signature*<br>Browser checks for<br>authorized access to the page.<br>See authorization success case
az-->>-u: Return valid check

u->>+e: DeleteVehicleProfile(vehicleProfile: IVehicleProfile) : IActionResult
    Note over u,e: Invoked when user clicks button to delete<br>vehicle profile

    e->>+vpm: DeleteVehicleProfile(vehicleProfile: IVehicleProfile) : IResponse
        Note over e,vpm: Entry point calls upon manager<br>to delete vehicle profile

        vpm->>vpm: Validate Parameters

        vpm->>+vps: DeleteVehicleProfile(vehicleProfile: IVehicleProfile) : IResponse
            Note over vpm,vps: VehicleProfileManager calls upon VehicleProfileService to<br>delete the vehicle profile

            vps->>vps: Validate parameters

            # Delete the vehicle profile
            vps->>+dg: DeleteVehicleProfileSql(vehicleID: int) : IResponse
                Note over vps,dg: VehicleProfileDeletionService calls upon SqlDbVehicleTarget to generate<br>parameterized SqlCommand

                dg->>dg: SqlDbVehicleTarget creates<br>Parameterized SqlCommand

                dg->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>) : IResponse
                    Note over dg,da: SqlDbVehicleTarget calls upon SqlServerDao to write the sql

                    da->>+ds: ExecuteNonQuery() : int
                        Note over da,ds: SqlServerDAO calls upon<br>Microsoft.Data.SqlClient to execute<br> sql command

                        ds->>ds: DELETE FROM VehicleProfile<br>WHERE VehicleID = @vehicleID
                            Note over ds,ds: Cascade delete should run within the database

                        ds->>ds: Vehicle profile is successfully<br>deleted from the Data Store

                    ds-->>-da: Database returns the number of rows affected

                    da->>da: Check for thrown exceptions

                da-->>-dg: IResponse object returned with<br>`IResponse.ReturnValue` equal to the retrieved value

                dg->>dg: SqlDbVehicleTarget checks to see that one and only one row was affected

            dg-->>-vps: IResponse object returned with<br>`IResponse.HasError` equal to false

            vps-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, createdBy: string) : IResponse
                Note over vps,ll: VehicleProfileDeletionService calls upon LogService to log<br>successful deletion of vehicle profile.<br>See logging success case

        vps-->>-vpm: IResponse object returned

        vpm->>vpm: Check for errors in returned IResponse object

        vpm->>vpm: Check for violation of business rules
        
        # Log successful vehicle deletion
        vpm-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
            Note over vpm,ll: VehicleProfileManager calls upon LogService to log<br>successful deletion of vehicle profile.<br>See logging success case

    vpm-->>-e: IResponse object returned

    e->>e: Check for errors in returned IResponse object

    e->>e: Inject success into HTML
e-->>-u: Return OK IActionResult
    