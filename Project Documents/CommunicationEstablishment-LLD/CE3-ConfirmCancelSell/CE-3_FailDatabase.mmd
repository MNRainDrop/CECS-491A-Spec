sequenceDiagram
participant u as User
participant az as AuthN/AuthZ (Entry Point)
participant e as CommunicationEstablishmentPoint (Entry Point)
participant m as CommunicationEstablishmentManager (Manager Layer)
participant s as DealConfirmation (Service Layer)
participant cs as CreateChatSession (Service Layer)
participant ll as LogService (Services Layer)
participant dt as SqlDbCommunicationEstablishmentTarget (Data Gateway)
participant da as SqlServerDAO (Data Access Object)
participant ds as Data Store (Sql Server)

Note left of u: Authenticated user confirms

u->>+az: CheckToken() 
az-->>-u: Return valid check

u->>+e: ConfirmDeal(seller: string, dealType: string) : IResponse
Note over u,e: seller confirms deal with buyer

e->>+m: ConfirmDeal(buyer: string, dealType: string) : IResponse
Note over e,m: Entry point calls manager to handle deal confirmation

m->>+s: DealConfirmation(seller: string, dealType: string) : IResponse
Note over m,s: Manager invokes service to handle deal confirmation

s->>+dt: UpdateDealStatusSql(vin: string, status: int) : IResponse
Note over s,dt: Service calls data gateway to update deal status in the database

dt->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): int
da->>+ds: SqlCommand.ExecuteNonQuery() : int
ds->>ds: UPDATE MarketplaceStatus SET MarketplaceStatus  = 1 WHERE Vin = @Vin
ds->>ds: Failed to update MarketplaceStatus

ds-->>da: Database throws an exception

da->>da:Check for thrown exceptions

da-->>dt:IResponse object returned with <br> `IResponse.HasError` equal to true and <br>`IResponse.ErrorMessage` equal to the thrown exception

dt->>dt:SqlDbCommunicationEstablishmentTarget checks the error to see if the error is safe to retry

dt-->>s:IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

s->>s:Check for errors in IResponseObject

s-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

s-->>m: IResponse object returned

m->>m: Check for erros in returned IResponse object

m->>m: Check business rules

m-->>ll:CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

m-->>e: IResponse object returned

e->>e: Check for erros in returned IResponse object

e-->>u:Return StatusCode(500, IResponseObject.ErrorMessage)