sequenceDiagram
participant u as Browser
participant az as AuthN/AuthZ<br>(Entry Point)
participant e as CommunicationEstablishmentPoint<br>(Entry Point)
participant m as CommunicationEstablishmentManager<br>(Manager Layer)
participant s as GetSellerInfo<br>(Service Layer)
participant cs as CreateChatSession(Service Layer)
participant ll as LogService<br>(Services Layer)
participant dt as SqlDbCommunicationEstablishmentTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Left of u: User visited Vehicle Marketplace and <br> is in post details
u->>+az: CheckToken() 
az-->>-u: Return valid check

u->>u: Clicks Request button
Note over u: The buyer clicks the button to send <br> a communication request to the seller

u->>+e: GetSellerInfo(BuyerUserName: string, vin: string ) : IResponse
Note over u,e: The reqeust will get the buyers username and vin of the post 

e->>+m: GetSellerInfo(BuyerUserName: string, vin:string) : IResponse
m->>m: Validate

m->>+s: GetSellerInfo(BuyerUserName: string, vin: string ) : IResponse
Note over m,s: The service will need the usernames of the the buyer and seller <br> to create a chat sesssio
s->>s: GetSellerInfo service will use the vin of the post to get username of the seller

s->>+dt: GetSellerInfoSql(search: ISearchParameters) : IResponse

dt->>+da: ExecuteReadSql(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>):IResonse

da->>+ds: SqlCommand.ExecuteReader() : SqlDataReader

ds->>ds: SELECT(UserAccount.UserName)<br> FROM UserAccount <br> INNER JOIN VehicleDetails ON VehicleProfile.VIN = VehicleDetails.VIN <br> INNER JOIN VehicleProfile ON UserAccount.UID = VehicleProfile.Owner_UID
ds->>ds: Username of the seller is successfully retrieved

ds -->>-da: Database returns query results

da ->>da: Check for thrown errors

da->>da:Create new IResponse object

da-->>-dt:IResponse object returned

dt->>dt: Check for errors

dt->>dt: Extract value from IResponse.Return value 

dt-->>-s: IResponse object returned 

s->>s: Check for errors

s -->>-m: IResponse object returned
Note over s,m: Will return the BuyerUserName: string, vin: string, SellerUserName:string
m->>m: check for errors
m->>m: With the new parameter of the SellerUsername: string it will call <br> CreateChatSession service

m-->>cs:CreateChatSession(BuyerUserName: string, vin: string, SellerUserName:string) IResponse

cs->>cs:validate 

cs->>cs: CreateChatSession service creates a new IChat object
Note over cs: string VIN = vin <br> int SeessionID = id <br> string BuyerUsername = UsernameOfBuyer <br> string SellerUserName = UsernameOfSeller <br> int ViewStatus = view <br> datetime MessageCreationTime = NULL <br> text MessageContent = NULL

cs->>dt: UploadingChat(IChat): IResponse

dt->>da:ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): int

da->>+ds:SqlCommand.ExecuteNonQuery() : int

ds->>ds: INSERT INTO Chat (VIN, SessionID, BuyerUsername, SellerUsername, ViewStatus, MessageCreationTime, MessageContent) <br> VALUES (@VIN, @SessionID, @BuyerUsername, @SellerUsername, @ViewStatus, @MessageCreationTime, @MessageContent)

ds->>ds: Chat is successfully <br> writtehn to the Data Store

ds-->>-da: Database returns the number of rows affected

da ->>da: check for thrown exceptions

da -->>dt: SQLServerDAO returns the number of rows affected

dt -->>cs: IResponse object returned with <br> 'IResponse.HasError' equal to false

cs->>cs: check for errors

cs -->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

cs-->>m:IResponse object returned

m->>m:Check for errors in returned IResponse object

m->>m:Check business rules

m-->>ll:CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

m-->>e: IResponse object returned

e-->>e:Check for errors in returned IResponse object

e-->>e:Inject success into HTML

e-->>u:Return OK
