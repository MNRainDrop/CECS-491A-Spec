sequenceDiagram
participant u as Browser
participant az as AuthN/AuthZ<br>(Entry Point)
participant e as CommunicationEstablishmentPoint<br>(Entry Point)
participant m as CommunicationEstablishmentManager<br>(Manager Layer)
participant s as GetSellerInfo<br>(Service Layer)
participant cs as CreateChatSession(Service Layer)
participant ll as LogService<br>(Services Layer)
participant dt as SqlDbCommunicationEstablishmentTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Left of u: User visited Vehicle Marketplace and <br> is in post details
u->>+az: CheckToken() 
az-->>-u: Return valid check

u->>u: Clicks Request button
Note over u: The buyer clicks the button to send <br> a communication request to the seller

u->>+e: GetSellerInfo(BuyerUserName: string, vin: string ) : IResponse
Note over u,e: The reqeust will get the buyers username and vin of the post 

e->>+m: GetSellerInfo(BuyerUserName: string, vin:string) : IResponse
m->>m: Validate

m->>+s: GetSellerInfo(BuyerUserName: string, vin: string ) : IResponse
Note over m,s: The service will need the usernames of the the buyer and seller <br> to create a chat sesssio
s->>s: GetSellerInfo service will use the vin of the post to get username of the seller

s->>+dt: GetSellerInfoSql(search: ISearchParameters) : IResponse

dt->>+da: ExecuteReadSql(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>):IResonse

da->>+ds: SqlCommand.ExecuteReader() : SqlDataReader

ds->>ds: SELECT(UserAccount.UserName)<br> FROM UserAccount <br> INNER JOIN VehicleDetails ON VehicleProfile.VIN = VehicleDetails.VIN <br> INNER JOIN VehicleProfile ON UserAccount.UID = VehicleProfile.Owner_UID
ds->>ds: unable to retrieve username of the seller

ds -->>-da: Database throws an exception

da->>-da:Check for thrown exceptions

da-->>dt:IResponse object returned with <br> `IResponse.HasError` equal to true and <br>`IResponse.ErrorMessage` equal to the thrown exception

dt->>-dt:SqlDbCommunicationEstablishmentTarget checks the error to see if the error is safe to retry

dt-->>s:IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

s->>s:Check for errors in IResponseObject

s-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

s-->>m: IResponse object returned

m->>m: Check for erros in returned IResponse object

m->>m: Check business rules

m-->>ll:CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse

m-->>e: IResponse object returned

e->>e: Check for erros in returned IResponse object

e-->>u:Return StatusCode(500, IResponseObject.ErrorMessage)
