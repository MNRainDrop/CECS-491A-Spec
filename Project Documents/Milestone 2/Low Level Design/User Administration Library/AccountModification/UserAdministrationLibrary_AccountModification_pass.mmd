

sequenceDiagram

    # MethodName(varaibleName : dataType) : ReturnType

    participant ml as Manager Layer
    participant ls as LoggingService<br>(Services Layer)
    participant as as AuthService<br>(Services Layer)
    participant uc as UserService<br>(Services Layer)
    participant dg as SqlDbUserTarget<br>(Data Gateway)
    participant da as SQLServerDAO
    participant ds as Data Store

    Note Right of e: Assume something in the entry point<br>called the manager to do create a user
    Note Right of usm: Assume the user provided values are valid<br>and the user is authorized to create an account

    ml->>+uc:  modifyUser(IProfileUserModel): IResponse
        Note over ml,uc: Manager Layer calls upon<br>`modifyUser(DateTime dateOfBirth): IResponse`<br>to modify the user

    # UserService should check/ validate data passed through
    uc->>uc: UserService checks to see if the `IProfileUserModel` object has errors or not

    # Modify the user
     uc->>+dg: generateAccountModificationSQL(IProfileUserModel): IResponse
     Note over uc,dg: UserService calls upon<br>`generateAccountModificationSQL(IProfileUserModel): IResponse`<br>to pass user data to be written to a parameterized SqlCommand

    dg->>dg: SqlDbUserTarget creates Parameterized SqlCommand

    dg->>+da:  executeWriteSQL(sql: SqlCommand ): IResponse
    Note over dg,da: SqlServerUserTarget calls upon<br>`executeWriteSQL(sql: SqlCommand): IResponse `<br>to write the sql

    da->>+ds: SqlCommand.ExecuteNonQuery()
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command

    ds->>ds: User account data is successfully<br>modified in the Data Store

    ds-->>-da: Database returns the number of rows affected

    da-->>-dg: IResponse object returned with<br>`Response.ReturnValue` equal to the retrieved value

    dg-->>-uc: IResponse object returned with<br>`IResponse.HasError` equal to false

    uc-->>-ml: IResponse object returned

    ml ->> ls: 'createLog(logLevel: string , logCategory: string, logContext: string, createdBy: string?): IResponse '
         Note over ml,ls: LoggingService calls upon<br>'createLog(logLevel: string , logCategory: string, logContext: string, createdBy: string?): IResponse'<br> to log the modification was successful
         Note right of ls: See Low Level Design for succesful Logging case
