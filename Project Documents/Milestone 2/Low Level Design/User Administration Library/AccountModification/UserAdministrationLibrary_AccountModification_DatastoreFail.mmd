sequenceDiagram

    # MethodName(varaibleName : dataType) : ReturnType

    participant ml as Manager Layer
    participant ls as LoggingService<br>(Services Layer)
    participant as as AuthService<br>(Services Layer)
    participant uc as UserService<br>(Services Layer)
    participant dg as SqlDbUserTarget<br>(Data Gateway)
    participant da as SQLServerDAO
    participant ds as Data Store
    
    ml->>+as: 'isAuthorized( currentPrincipal: AppPrincipal, requiredClaims: IDictionary<string> <string>): AppAuthService '
        Note over ml,as: Manager Layer calls upon<br>  'isAuthorized( currentPrincipal: AppPrincipal, requiredClaims: IDictionary<string> <string>): AppAuthService'<br>to see if user has correct permissions
        Note right of as: See Low Level Design for success Authorization case

    ml->>+uc:  modifyUser(IProfileUserModel): IResponse
        Note over ml,uc: Manager Layer calls upon<br>`modifyUser(IProfileUserModel: object): IResponse`<br>to modify the user

    # UserService should check/ validate data passed through
    uc->>uc: UserService checks to see if the `IProfileUserModel` object has errors or not

    # Modify the user
     uc->>+dg: generateAccountModificationSQL(IProfileUserModel): IResponse
     Note over uc,dg: UserService calls upon<br>`generateAccountModificationSQL(IProfileUserModel): IResponse`<br>to pass user data to be written to a parameterized SqlCommand

    dg->>dg: SqlDbUserTarget creates Parameterized SqlCommand

    dg->>+da: IResponse executeWriteSQL(sql: SqlCommand )
    Note over dg,da: SqlServerUserTarget calls upon<br>`executeWriteSQL(sql: SqlCommand): IResponse `<br>to write the sql

    da->>+ds: SqlCommand.ExecuteNonQuery()
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command\

    ds->>ds: User account unsuccessfully<br>writes to the Data Store

    ds-->>-da: Database returns an error

    da-->>-dg: IResponse object returned with<br>`IResponse.HasError` equal to true and<br>`IResponse.ErrorMessage` equal to the error message 

    dg->>dg: SqlDbUserTarget checks the error to see if the error is safe to retry

    dg-->>-uc: IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

    uc-->>ll: CreateLogAsync(LogLevel: string, LogCategory: string, LogContext: string, UserHash: string) : IResponse
    Note over uc,ll: UserService calls upon LogService to log<br>unsuccessful assignment of claims and/or account creation.<br>See logging success case

uc-->>-usm: IResponse object returned