sequenceDiagram

    # MethodName(varaibleName : dataType) : ReturnType
    participant u as User
    participant e as Entry Point
    participant ml as Manager Layer
    participant ls as LoggingService<br>(Services Layer)
    participant as as AuthService<br>(Services Layer)
    participant uc as UserService<br>(Services Layer)
    participant dg as SqlDbUserTarget<br>(Data Gateway)
    participant da as SQLServerDAO
    participant ds as Data Store
    
    Note Right of e: Assume something in the entry point<br>called the manager to do modify a user
    Note Right of ml: Assume the user provided values are valid<br>and the user is authorized to modify an account

    ml->>+uc:  modifyUser(userName: String, dateOfBirth: DateTime, secondaryEmail: String): IResponse
        Note over ml,uc: Manager Layer calls upon<br>`modifyUser(userName: String, dateOfBirth: DateTime, secondaryEmail: String): IResponse`<br>to modify the user

    # UserService should check/ validate data passed through
    uc->>uc: UserService checks to see if the arugments userName, dateOfBirth, and secondaryEmail have errors or not

    # Modify the user
     uc->>+dg: generateAccountModificationSQL(IProfileUserModel): IResponse
     Note over uc,dg: UserService calls upon<br>`generateAccountModificationSQL(IProfileUserModel: object): IResponse`<br>to pass user data to be written to a parameterized SqlCommand

    dg->>dg: SqlDbUserTarget creates Parameterized SqlCommand

    dg->>+da:  executeWriteOnly(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): IResponse
    Note over dg,da: SqlServerUserTarget calls upon<br>`executeWriteOnly(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): IResponse `<br>to write the sql

    da->>+ds: SqlCommand.ExecuteNonQuery()
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command\

    ds->>ds: User account unsuccessfully<br>writes to the Data Store

    ds-->>-da: Database returns an error

    da-->>-dg: IResponse object returned with<br>`IResponse.HasError` equal to true and<br>`IResponse.ErrorMessage` equal to the error message 
  
    dg-->>-uc: IResponse object returned 

    uc-->>ll: CreateLogAsync(LogLevel: string, LogCategory: string, LogContext: string, UserHash: string) : IResponse
    Note over uc,ll: UserService calls upon LogService to log<br>unsuccessful assignment of claims and/or account creation.<br>See logging success case

    uc-->>-usm: IResponse object returned