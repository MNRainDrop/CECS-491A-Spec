sequenceDiagram
participant u as User
participant e as Entry Point
participant usm as UserAdministrationManager<br>(Manager Layer)
participant uc as UserService<br>(Services Layer)
participant ss as PepperService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbUserTarget<br>(Data Gateway)
participant da as SqlServerDAO
participant ds as Data Store

Note Right of e: Assume something in the entry point<br>called the manager to do create a user
Note Right of usm: Assume the user provided values are valid<br> and the user is authorized to create an account

usm->>+uc: CreateValidUserAccount(userName: string, dateOfBirth: string) : IResponse
    Note over usm,uc: UserAdministrationManager calls upon<br>User Service to create the user with the pepper

uc->>uc: UserService creates a new IUserAccountModel object
    Note over uc,uc: string UserName = userName<br>DateTime DateOfBirth = DateTime.Parse(datOfBirth)<br>DateTime AccountCreationDate = current DateTime

uc->>+ss: RetrievePepper() : uint 
    Note over uc,ss: UserAdministrationManager calls upon<br>PepperService to get a pepper for the user.<br>See PepperService success scenario
ss-->>-uc: PepperService returns a randomly generated pepper

uc->>uc: UserService assigns `Pepper`<br>property in the IUserAccountModel
    Note over uc,uc: uint Pepper = PepperService.RetrievePepper()

uc->>+dg: CreateUserAccountSQL(userAccount: IUserAccountModel) : IResponse
    Note over uc,dg: UserService calls upon SqlDbUserTarget<br>to generate sql statement and parameters

dg->>+da: ExecuteWriteSQL(sqlCommands: IDictionary<sql: string, sqlParameters: HashSet<SqlParameter>>) : IResponse
    Note over dg,da: SqlServerUserTarget calls upon<br>SqlServerDAO to generate the sql

rect rgba(127, 127, 127, 0.2)
loop For every command in sqlCommands

da->>+ds: SqlCommand.ExecuteNonQuery()
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command

ds->>ds: INSERT INTO UserAccount (Username, AccountCreationDate, UserHash)<br> VALUES (UserName, AccountCreationDate, UserHash)
end
end

ds->>ds: User account is successfull<br>written to the Data Store

ds-->>-da: Database returns the number of rows affected

da-->>-dg: IResponse object returned with<br>`IResponse.ReturnValue` equal to the retrieved value

dg->>dg: SqlDbUserTarget checks that only<br>one row was affected

dg-->>-uc: IResponse object returned with<br>`IResponse.HasError` equal to false

uc-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
    Note over uc,ll: UserService calls upon LogService to log<br>successful account creation.<br>See logging success case

uc->>uc: Create an IDictionary of<br>claims a user will have

uc->>+dg: AssignUserAccountClaimsSQL(userAccount: IUserAccountModel, userClaims: IDictionary<claimID: int, claimScope: int>) : IResponse
    Note over uc,dg: UserService calls upon SqlDbUserTarget<br>to generate the sql statement and parameters

dg->>+da: ExecuteWriteSQL(sqlCommands: IDictionary<sql: string, sqlParameters: HashSet<SqlParameter>>) : IResponse
    Note over dg,da: SqlServerUserTarget calls upon<br>SqlServerDAO to generate the sql

rect rgba(127, 127, 127, 0.2)
loop For every command in sqlCommands

da->>+ds: SqlCommand.ExecuteNonQuery()
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command

ds->>ds: INSERT INTO UserAccount (Username, AccountCreationDate, UserHash)<br> VALUES (UserName, AccountCreationDate, UserHash)
end
end

ds->>ds: All UserClaims are successfully<br>written to the Data Store

ds-->>-da: Database returns the number of rows affected

da-->>-dg: IResponse object returned with<br>`Response.ReturnValue` equal to the retrieved value

dg->>dg: SqlDbUserTarget checks that `Response.ReturnValue`<br> is equal to the number of claims in the dictionary

dg-->>-uc: IResponse object returned with<br>`IResponse.HasError` equal to false

uc-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
    Note over uc,ll: UserService calls upon LogService to log<br>successful assignment of claims.<br>See logging success case

uc-->>-usm: IResponse object returned
