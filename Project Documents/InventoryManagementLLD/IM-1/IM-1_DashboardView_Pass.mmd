sequenceDiagram
participant u as Browser
participant e as InventoryManagementEntryPoint<br>(Entry Point)
participant az as AuthN/AuthZ<br>(Manager Point)
participant vpm as InventoryVehicleManager<br>(Manager Layer)
participant vps as InventoryVehicleRetrievalService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Left of u: User attempts to to retrieve vehicle profiles
u->>+e: GetInventoryView(page: int) : IActionResult
    Note over u,e: Invoked when user clicks button to view<br>Inventory Management

    e->>+az: GetPrincipalFromJwt() : IResponse
        Note over e,az: Retrieves principal from tokens.<br>See Security success case.

    az->>-e: IResponse object returned

    e->>e: Get user model from IResponse Object
        Note over e,e: userAccount = principal.UserModel

    e->>+vpm: GetInventoryVehicles(page: int, userAccont: IUserAccount) : IResponse
        Note over e,vpm: InventoryManagementEntryPoint calls upon<br>InventoryVehicleManagerto retrieve vehicle profiles

        vpm->>vpm: Validate Parameters
            
        vpm->>+vps: RetrieveInventoryVehicles(page: int, itemsPerPage: int, userAccount: IUserAccount) : IResponse
            Note over vpm,vps: Returns a collection of vehicle profiles in IResponse.ReturnValue

            vps->>vps: Validate Parameters

            vps->>+dg: ReadInventoryVehicelsSql(page: int, itemsPerPage: int, userAccount: IUserAccount) : IResponse
                Note over vps,dg: InventoryVehicleRetrievalService calls upon SqlDbVehicleTarget to generate<br>the sql statement and parameters

                dg->>dg: Convert search parameters into SQL statement

                dg->>+da: ExecuteReadSql(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>) : IResponse
                    Note over dg,da: SqlServerUserTarget calls upon<br>SqlServerDAO to execute the sql

                    da->>+ds: SqlCommand.ExecuteReader() : SqlDataReader
                        Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteReader()`<br>to execute the sql command
                        
                        ds->>ds: SELECT (VIN, Make, Model, Year, Color, Status, PostingDate, Price, PriceDate, Inquiries)<br>FROM VehicleProfile as VP<br>INNER JOIN VendingStatus as vs ON vs.VIN = <br> WHERE Owner_UID = @UserID<br> ORDER BY DateCreated<br> OFFSET (page * itemsPerPage) ROWS<br> FETCH NEXT (itemsPerPage) ROWS ONLY;

                        ds->>ds: Vehicle profile(s) is successfully retireved<br>from the Data Store

                    ds-->>-da: Database returns query results

                    da->>da: Check for thrown errors

                    da->>da: Create new IResponse object
                        Note over da: HasError = false<br>ErrorMessage = null<br>ReturnValue = new list containing returned query results

                da-->>-dg: IResponse object returned

                dg->>dg: Check for errors in returned IResponse object

                dg->>dg: Extract value from IResponse.Return value and cast it into a list of IVehicleProfile objects

                dg->>dg: Set IResponse.ReturnValue to the new list of IVehicleProfile objects

            dg-->>-vps: IResponse object returned

            vps->>vps: Check for errors in IResponseObject

            # Log successful vehicle profile retrieval
            vps-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
                Note over vps,ll: UserService calls upon LogService to log<br>successful retrieval of vehicle profiles.<br>See logging success case

        vps-->>-vpm: IResponse object returned

        vpm->>vpm: Check for errors in returned IResponse object

        vpm->>vpm: Check for any violations of business rules

        vpm->>vpm: Convert IResponse.ReturnValue into JSON string

        # Log successful vehicle profile retrieval
        vpm-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
            Note over vpm,ll: UserService calls upon LogService to log<br>successful retrieval of vehicle profiles.<br>See logging success case

    vpm-->>-e: IResponse object returned

    e->>e: Check for errors in returned IResponse object

    e->>e: Inject the vehicle profiles into HTML

e-->>-u: Return OK IActionResult
