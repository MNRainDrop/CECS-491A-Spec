sequenceDiagram
participant u as Browser
participant az as AuthN/AuthZ<br>(Entry Point)
participant e as VehicleMarketPlaceEntryPoint<br>(Entry Point)
participant vpm as VehicleMarketPlaceManager<br>(Manager Layer)
participant vps as VehicleMarketPlacePostDeletionService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Left of u: User attempts to to delete a<br>vehicle profile they own
u->>+az: CheckToken() 
    Note over u,az: *Temporary method signature*<br>Browser checks for<br>authorized access to the page.<br>See authorization success case
az-->>-u: Return valid check

u->>+e: DeletePostFromMarketplace(marketplaceStatus: IMarketplaceStatus) : IActionResult
    Note over u,e: Invoked when user clicks button on a specific post to delete<br>it from the marketplace 

    e->>+vpm: DeletePostFromMarketplace(marketplaceStatus: IMarketplaceStatus) : IResponse
        Note over e,vpm: Entry point calls upon manager<br>to delete vehicle profile post

        vpm->>vpm: Validate Parameters

        vpm->>+vps: DeletePostFromMarketplace(marketplaceStatus: IMarketplaceStatus) : IResponse
            Note over vpm,vps: VehicleMarketPlaceManager calls upon VehicleMarketPlacePostDeletionService to<br>delete the post from marketplace

            vps->>vps: Validate parameters
                Note over vps,vps: string VIN = vin<br>int ViewStatus=0<br>string MarketplaceDescription=null<br>int MarketplaceStatus=0


            # Delete the post 
            vps->>+dg: DeletePostFromMarketplaceSql(vehicleID: int) : IResponse
                Note over vps,dg: VehicleMarketPlacePostDeletionService calls upon SqlDbVehicleTarget to generate<br>parameterized SqlCommand

                dg->>dg: SqlDbVehicleTarget creates<br>Parameterized SqlCommand

                dg->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>) : IResponse
                    Note over dg,da: SqlDbVehicleTarget calls upon SqlServerDao to write the sql

                    da->>+ds: ExecuteNonQuery() : int
                        Note over da,ds: SqlServerDAO calls upon<br>Microsoft.Data.SqlClient to execute<br> sql command

                        ds->>ds: INSERT INTO MarketplaceStatus (VIN, ViewStatus, MarketplaceDescription, MarketplaceStatus)<br>VALUES (@VIN, @ViewStatus, @MarketplaceDescription, @MarketplaceStatus)
                            Note over ds,ds: Setting value back to default value

                        ds->>ds: MarketPlace Status is unsuccessfully<br>updated in the Data Store 

                    ds-->>-da: Database throws an exception

                    da->>da: Check for thrown exceptions

                 da-->>-dg: IResponse object returned with<br>`IResponse.HasError` equal to true and<br>`IResponse.ErrorMessage` equal to the thrown exception

                dg->>dg: SqlDbVehicleTarget checks the error to see if the error is safe to retry

            dg-->>-vps: IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

            # Log unsuccessful vehicle deletion
            vps-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, createdBy: string) : IResponse
                Note over vps,ll: VehicleProfileDeletionService calls upon LogService to log<br>unsuccessful deletion of vehicle profile.<br>See logging success case

        vps-->>-vpm: IResponse object returned

        vpm->>vpm: Check for errors in returned IResponse object

        vpm->>vpm: Check for violation of business rules
        
        # Log unsuccessful vehicle deletion
        vpm-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
            Note over vpm,ll: VehicleProfileManager calls upon LogService to log<br>unsuccessful deletion of vehicle profile.<br>See logging success case

    vpm-->>-e: IResponse object returned

    e->>e: Check for errors in returned IResponse object

e-->>-u: Return StatusCode(500, IResponseObject.ErrorMessage)