sequenceDiagram
participant u as User
participant az as AuthN/AuthZ (Entry Point)
participant e as CommunicationEstablishmentPoint (Entry Point)
participant m as CommunicationEstablishmentManager (Manager Layer)
participant s as DealConfirmation (Service Layer)
participant cs as CreateChatSession (Service Layer)
participant ll as LogService (Services Layer)
participant dt as SqlDbCommunicationEstablishmentTarget (Data Gateway)
participant da as SqlServerDAO (Data Access Object)
participant ds as Data Store (Sql Server)

Note left of u: Authenticated user confirms

u->>+az: CheckToken() 
az-->>-u: Return valid check

u->>+e: ConfirmDeal(seller: string, dealType: string) : IResponse
Note over u,e: seller confirms deal with buyer

e->>+m: ConfirmDeal(buyer: string, dealType: string) : IResponse
Note over e,m: Entry point calls manager to handle deal confirmation

m->>+s: DealConfirmation(seller: string, dealType: string) : IResponse
Note over m,s: Manager invokes service to handle deal confirmation

s->>+dt: UpdateDealStatusSql(vin: string, status: int) : IResponse
Note over s,dt: Service calls data gateway to update deal status in the database

dt->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): int
da->>+ds: SqlCommand.ExecuteNonQuery() : int
ds->>ds: UPDATE MarketplaceStatus SET MarketplaceStatus  = 1 WHERE Vin = @Vin

ds->>da: Database executes update query
da-->>dt: Number of rows affected returned
dt-->>s: Response returned to service
s-->>m: Response returned to manager
m-->>e: Response returned to entry point
e-->>u: Return response to user

Note right of u: Vehicle profile status updated to "Sold"

u->>+u: PromptLocation() : string
Note over u: seller enters their location

u->>+e: SendLocationMessage(location: string) : IResponse
Note over u,e: seller sends location message

e->>+m: SendLocationMessage(location: string) : IResponse
m->>+cs: SendMessage(message: IMessage) : IResponse
Note over m,cs: Entry point calls service to create a chat session and send the location message

cs->>+dt: InsertMessageSql(message: IMessage) : IResponse
Note over cs,dt: Service calls data gateway to insert the location message into the database

dt->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>): int
da->>+ds: SqlCommand.ExecuteNonQuery() : int
ds->>ds: INSERT INTO Chat (VIN, SessionID, BuyerUsername, SellerUsername, ViewStatus, MessageCreationTime, MessageContent) <br> VALUES (@VIN, @SessionID, @BuyerUsername, @SellerUsername, @ViewStatus, @MessageCreationTime, @MessageContent)

ds->>da: Database executes insert query
da-->>dt: Number of rows affected returned
dt-->>cs: Response returned to service
cs-->>m: Response returned to entry point
m-->>e: Response returned to user

Note right of u: Location message sent in chat session


