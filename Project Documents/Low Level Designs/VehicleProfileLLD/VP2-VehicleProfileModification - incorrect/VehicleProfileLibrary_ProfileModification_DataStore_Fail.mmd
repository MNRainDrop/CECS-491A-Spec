sequenceDiagram
participant u as User
participant e as Entry Point
participant vpm as VehicleProfileManager<br>(Manager Layer)
participant vms as VehicleManagerService<br>(Services Layer)
participant vpss as VehicleProfileSelectionService<br>(Services Layer)
participant ll as LogService<br>(Services Layer)
participant dg as SqlDbVehicleTarget<br>(Data Gateway)
participant da as SqlServerDAO<br>(Data Access Object)
participant ds as Data Store<br>(Sql Server)

Note Right of e: Assume something in the entry point<br>called the manager to modify a vehicle profile
Note Right of vpm: Assume the user provided values<br> are valid and the user is authorized<br>to modify a vehicle profile

vpm->>+vms: ModifyVehicleProfile(newVehicleProfile: IVehicleProfile, userAccount: IUserAccount) : IResponse
    Note over vpm,vms: VehicleProfileManager calls upon<br>VehicleModificationService to update a vehicle

vms->>vms: Validate Parameters

# Retrieve vehicle profile using the vin of the new vehicle profile
vms->>vpss: VehicleProfileSelection(vin: string, userAccount: IUserAccount) : IResponse
    Note over vms,vpss: VehicleProfileSelectionService returns the vehicle profile<br>See VehicleProfileSelection for success case.

vpss-->>vms: Return IResponse

vms->>vms: Check that VIN of the new Vehicle and Retrieved vehicle<br>Check the UserAccount is the same as the retrieved Vehicle Owner

# Create new IVehicleProfile Object
vms->>vms: VehicleProfileService creates a new IVehicleProfile object
    Note over vms,vms: string VIN = vin<br>string LicensePlate = licensePlate<br>string Make = make<br>string Model = model<br>int Year = year<br>string Color = color<br>int Owner = userID

# Send to data store
vms->>+dg: CreateVehicleProfileSql(vehicleProfile: IVehicleProfile) : IResponse
    Note over vms,dg: VehicleProfileService calls upon SqlDbVechileTarget to generate the sql statement and parameters<br>SqlDbVehicleTarget will create sql statement and parameters first

dg->>+da: ExecuteWriteSQL(sqlCommands: ICollection<KeyValuePair<sql: string, sqlParameters: HashSet<SqlParameter>>>) : int
    Note over dg,da: SqlServerUserTarget calls upon<br>SqlServerDAO to execute the sql

da->>+ds: SqlCommand.ExecuteNonQuery() : Int
    Note over da,ds: SqlServerDAO calls upon<br>`SqlCommand.ExecuteNonQuery()`<br>to execute the sql command
ds->>ds: UPDATE VehicleProfile SET LicensePlate = IVehicleProfile.LicensePlate, Color = IVehicleProfile.Color <br>WHERE VIN = IVehicleProfile.VIN AND OwnerID = UserID

ds->>ds: Vehicle profile was unsuccessfully<br>updated in the Data Store

ds-->>-da: Database throws an exception

dg->>dg: IResponse object returned with<br>`IResponse.HasError` equal to true and<br>`IResponse.ErrorMessage` equal to the error message 

dg->>dg: SqlDbVehicleTarget checks the error to see if the error is safe to retry

dg-->>-vps: IResponse object returned with<br>`IResponse.IsSafeToRetry` updated

# Log successful vehicle creation
vms-->>ll: CreateLogAsync(logLevel: string, logCategory: string, logContext: string, userHash: string) : IResponse
    Note over vms,ll: UserService calls upon LogService to log<br>unsuccessful creation of vehicle profile.<br>See logging success case

vms-->>-vpm: IResponse object returned