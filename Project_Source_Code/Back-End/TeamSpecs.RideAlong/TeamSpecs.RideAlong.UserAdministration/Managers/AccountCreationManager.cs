using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TeamSpecs.RideAlong.Model;

namespace TeamSpecs.RideAlong.UserAdministration.Managers
{
    public class AccountCreationManager
    {
        private IAccountCreationService _accountCreationService;

        public AccountCreationManager(IAccountCreationService accountCreationService)
        {
            _accountCreationService = accountCreationService;
        }

        public IResponse VerifyEmail(string email)
        {
            IResponse response = new Response();

            // validiate email string

            // IF PASS -- call isNotTakenEmailInDB --> modify isNotTaken to see if ok
            IsNotTakenUserNameInDatabase(email);

            // IF IResponse = good --> no errors

            // IF IResponse = bad --> User exists in DB or SQL/ DB error

            return response;
        }

        // Rename to verifying account details
        // No longer creates account in DB due to needing confirm account first
        public IResponse RegisterUser(string username, DateTime dateOfBirth, string accountType)
        {
            IResponse response = new Response();

            // Check business rules in BRD 
            /* The following is needed to be checked
             * Username is a email --> aaa@something.com
             * DOB --> after 1/1/1970
             * Need to add address
             * Account Type must be valid account type
             */

            #region Business Rules
            // Check if email is valid
            if (!IsValidUsername(username))
            {
                //Log
                return response;
            }

            // Check if date of birth is valid
            if (!IsValidDateOfBirth(dateOfBirth))
            {
                //Log
                return response;
            }

            // Check if account type is valid
            if (!IsValidAccountType(accountType))
            {
                //Log
                return response;
            }
            // Check if email exists in DB
            if (!IsNotTakenUserNameInDatabase(username))
            {
                //Log
                return response;
            }
            #endregion

            // Call account creation service
            //response = _accountCreationService.CreateValidUserAccount(username, dateOfBirth, accountType);

            return response;
        }

        public bool IsNotTakenUserNameInDatabase(string username)
        {
            IResponse response = new Response();

            //response = _accountCreationService.IsUserRegistered(username);

            #region Validiate Response
            if (response.HasError)
            {
                response.ErrorMessage = "Account exists";
                return false;
            }
            else
            {
                response.HasError = false;
                return true;
            }
            #endregion

        }
        public bool IsValidUsername(string email)
        {
            // Minimum length check
            if (email.Length < 3)
                return false;

            #region Generated by ChatGPT checks for valid characters
            // Splitting username into parts at '@' symbol
            string[] parts = email.Split('@');

            // Checking if there are exactly 2 parts separated by '@'
            if (parts.Length != 2)
                return false;

            // Checking if the first part contains valid characters
            foreach (char c in parts[0])
            {
                if (!(char.IsLetterOrDigit(c) || c == '-' || c == '.'))
                    return false;
            }

            // Checking if the second part contains valid characters
            foreach (char c in parts[1])
            {
                if (!(char.IsLetterOrDigit(c) || c == '-' || c == '.'))
                    return false;
            }
            #endregion

            return true;
        }


        public bool IsValidDateOfBirth(DateTime dateOfBirth)
        {
            // Get the current date
            DateTime currentDate = DateTime.Today;

            // Calculate the minimum allowed date of birth (18 years before the current date)
            DateTime minDateOfBirth = currentDate.AddYears(-18);

            // Calculate the maximum allowed date of birth (January 1, 1970)
            DateTime maxDateOfBirth = new DateTime(1970, 1, 1);

            // Check if the provided date of birth is within the valid range
            return dateOfBirth >= maxDateOfBirth && dateOfBirth <= minDateOfBirth;
        }


        public bool IsValidAccountType(string accountType)
        {
            return accountType == "Vendor" || accountType == "Renter" || accountType == "Default User";
        }
    }
}
